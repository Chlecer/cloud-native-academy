@echo off
echo üìä OPENING MONITORING DASHBOARD
echo.

REM Check if kubectl is available
kubectl version --client >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå kubectl not found. Please install kubectl first.
    exit /b 1
)

echo üîç Checking monitoring services...
kubectl get pods -n monitoring >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå Monitoring namespace not found. Deploy the platform first.
    echo Run: deploy-ecommerce-platform.bat
    exit /b 1
)

echo ‚úÖ Monitoring services found

echo.
echo üìä Setting up port forwarding for monitoring services...

REM Check if Prometheus is running
kubectl get pod -n monitoring -l app=prometheus --no-headers | findstr "Running" >nul
if %errorlevel% equ 0 (
    echo ‚úÖ Prometheus is running
    echo üöÄ Starting Prometheus port-forward on http://localhost:9090
    start "Prometheus Dashboard" cmd /c "kubectl port-forward svc/prometheus 9090:9090 -n monitoring"
    timeout /t 3 >nul
) else (
    echo ‚ö†Ô∏è Prometheus not running
)

REM Check if Grafana is running
kubectl get pod -n monitoring -l app=grafana --no-headers | findstr "Running" >nul 2>&1
if %errorlevel% equ 0 (
    echo ‚úÖ Grafana is running
    echo üöÄ Starting Grafana port-forward on http://localhost:3001
    start "Grafana Dashboard" cmd /c "kubectl port-forward svc/grafana 3001:3000 -n monitoring"
    timeout /t 3 >nul
) else (
    echo ‚ÑπÔ∏è Grafana not available (optional component)
)

REM Check if AlertManager is running
kubectl get pod -n monitoring -l app=alertmanager --no-headers | findstr "Running" >nul 2>&1
if %errorlevel% equ 0 (
    echo ‚úÖ AlertManager is running
    echo üöÄ Starting AlertManager port-forward on http://localhost:9093
    start "AlertManager" cmd /c "kubectl port-forward svc/alertmanager 9093:9093 -n monitoring"
    timeout /t 3 >nul
) else (
    echo ‚ÑπÔ∏è AlertManager not available (optional component)
)

echo.
echo üåê Opening monitoring dashboards in browser...
timeout /t 5 >nul

REM Open Prometheus in default browser
start http://localhost:9090

REM Try to open Grafana if available
curl -s http://localhost:3001 >nul 2>&1
if %errorlevel% equ 0 (
    timeout /t 2 >nul
    start http://localhost:3001
)

echo.
echo ==========================================
echo üìä MONITORING DASHBOARD ACCESS
echo ==========================================
echo.
echo üéØ Available Dashboards:
echo   üìà Prometheus: http://localhost:9090
echo   üìä Grafana: http://localhost:3001 (if available)
echo   üö® AlertManager: http://localhost:9093 (if available)
echo.
echo üîç Key Metrics to Explore:
echo.
echo üìä Prometheus Queries:
echo   ‚Ä¢ up{job="backend-api"} - Service availability
echo   ‚Ä¢ rate(http_requests_total[5m]) - Request rate
echo   ‚Ä¢ histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) - 95th percentile latency
echo   ‚Ä¢ container_memory_usage_bytes{pod=~"backend-api.*"} - Memory usage
echo   ‚Ä¢ rate(postgres_connections_total[5m]) - Database connections
echo.
echo üéØ Business Metrics:
echo   ‚Ä¢ rate(user_registrations_total[5m]) - New user signups
echo   ‚Ä¢ rate(orders_created_total[5m]) - Order creation rate
echo   ‚Ä¢ rate(payment_processed_total[5m]) - Payment processing
echo   ‚Ä¢ avg(shopping_cart_items) - Average cart size
echo.
echo üö® Alert Conditions:
echo   ‚Ä¢ Backend API down for >30 seconds
echo   ‚Ä¢ Error rate >5% for >2 minutes
echo   ‚Ä¢ Response time >3 seconds for >5 minutes
echo   ‚Ä¢ Database connections >90% of limit
echo   ‚Ä¢ Memory usage >80% for >5 minutes
echo.
echo üìã Useful Prometheus Features:
echo   ‚Ä¢ Graph tab: Visualize metrics over time
echo   ‚Ä¢ Alerts tab: View active alerts
echo   ‚Ä¢ Targets tab: Check service discovery
echo   ‚Ä¢ Status ‚Üí Configuration: View Prometheus config
echo.
echo üí° Pro Tips:
echo   ‚Ä¢ Use rate() for counters, avg() for gauges
echo   ‚Ä¢ Add [5m] for 5-minute rate calculations
echo   ‚Ä¢ Use histogram_quantile() for percentiles
echo   ‚Ä¢ Combine metrics with operators (+, -, *, /)
echo.
echo ‚ö†Ô∏è Note: Keep these terminal windows open to maintain port-forwarding
echo Press Ctrl+C in the port-forward windows to stop access
echo.
pause